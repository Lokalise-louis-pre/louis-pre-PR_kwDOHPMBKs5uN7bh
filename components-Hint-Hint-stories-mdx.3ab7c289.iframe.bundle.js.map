{"version":3,"file":"components-Hint-Hint-stories-mdx.3ab7c289.iframe.bundle.js","mappings":";;;;;AAcA;ACAA;;;AAIA;;;ACmDA;AACA;AAMA;;AC/DA;AAKA;AAKA;AACA;AACA","sources":["webpack://@lokalise/louis/./src/components/Hint/styles.ts","webpack://@lokalise/louis/","webpack://@lokalise/louis/./src/components/Input/styles.ts","webpack://@lokalise/louis/./src/components/Label/styles.tsx"],"sourcesContent":["import { css, excludeProps, styled } from '@lokalise/styled';\n\nimport { spacing, value } from '../../utils/theme';\nimport { PopoverArrow as BaseArrow, PopoverContent as BaseContent } from '../Popover';\n\nconst side = '14px';\n\nconst centerPosition = css`\n\tposition: absolute; // Set as \"absolute\" so svg is not affecting line height.\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n`;\n\nexport const HintButton = styled.span`\n\tcursor: pointer;\n\tdisplay: inline-block;\n\tvertical-align: baseline;\n\twidth: ${side};\n\tmin-height: ${side};\n\tborder-radius: 50%;\n\tposition: relative; // Necessary so \"icon\" can be positioned in the center\n\tline-height: inherit;\n\n\t&::before {\n\t\tcontent: '\\\\a0'; // This space is necessary to hold line-height, which is necessary so Hint is visually aligned with the text\n\t}\n`;\n\nexport const IconWrapper = styled.span`\n\tdisplay: inline-flex;\n\tcolor: ${value('color.text.disabled')};\n\tfont-size: 16px;\n\t${centerPosition}\n`;\n\nexport const Content = styled(BaseContent)`\n\tfont-size: 14px;\n\tline-height: 20px;\n\tbackground-color: ${value('color.background.surface.default')};\n\tcolor: ${value('color.text.default')};\n\tborder-radius: ${value('radius.tooltip')};\n\tpadding: ${spacing(3, 4)};\n\tborder-color: ${value('color.border.default')};\n\tz-index: ${value('zIndex.tooltip')};\n\ttext-align: start;\n`;\n\nexport const Arrow = styled(BaseArrow).withConfig({ shouldForwardProp: excludeProps(['placement']) })`\n\t&:before {\n\t\tbackground-color: ${value('color.background.surface.default')};\n\t\tborder-color: ${value('color.border.default')};\n\t}\n`;\n",null,"import { css, excludeProps, modifier, styled } from '@lokalise/styled';\nimport type { InputHTMLAttributes } from 'react';\n\nimport { withInputContainerStyle, withInputFieldStyle, withInputSizeVariants } from '../../utils/styles';\nimport type { InputSizeVariants, InputStyleProps } from '../../utils/styles';\nimport { spacing, value } from '../../utils/theme';\nimport type { FlexProps } from '../Flex';\nimport { Flex } from '../Flex';\n\nexport const Container = styled.div`\n\twidth: 100%;\n\tdisplay: grid;\n\tgap: ${spacing(1)};\n\tgrid-template-columns: minmax(50px, 1fr); /* This ensures Input doesn't overflow 100% */\n`;\n\nexport const StyledInput = styled.input.withConfig({ shouldForwardProp: excludeProps(['error']) })<\n\tInputHTMLAttributes<HTMLInputElement> & InputStyleProps\n>`\n\t${withInputFieldStyle};\n\n\tborder: 0;\n\tmin-width: 50px;\n\twidth: 100%;\n\tpadding: 0;\n\tdisplay: block;\n`;\n\nexport const InputIcon = styled.div`\n\tline-height: 1;\n\tfont-size: 0;\n`;\n\ntype InputContainerProps = {\n\tinputSize: InputSizeVariants;\n\thasPrefix?: boolean;\n\thasSuffix?: boolean;\n\tdisabled?: boolean;\n\terror?: boolean;\n};\n\nexport const InputContainer = styled(Flex).withConfig({\n\tshouldForwardProp: excludeProps(['inputSize', 'hasPrefix', 'hasSuffix', 'disabled', 'error']),\n})<FlexProps & InputContainerProps>`\n\t${withInputContainerStyle};\n\t${withInputSizeVariants};\n\n\talign-items: center;\n\tpadding: ${spacing(0, 3)};\n\tcolor: ${value('color.text.input.placeholder')};\n\n\t&:focus-within,\n\t[data-dev-state='focus'] & {\n\t\tcolor: ${value('color.border.active')};\n\t}\n\n\t// All items should preserve their width\n\t> * {\n\t\tflex-shrink: 0;\n\t}\n\n\t// Except input\n\t> ${StyledInput} {\n\t\tflex-shrink: 1;\n\t}\n\n\t${modifier(\n\t\t'hasPrefix',\n\t\tcss`\n\t\t\tpadding-left: ${spacing(2)};\n\t\t`,\n\t)};\n\n\t${modifier(\n\t\t'hasSuffix',\n\t\tcss`\n\t\t\tpadding-right: ${spacing(2)};\n\t\t`,\n\t)};\n`;\n","import { css, modifier, styled } from '@lokalise/styled';\n\nimport { spacing, typography, value } from '../../utils/theme';\n\nexport const Container = styled.label<{ $underline: boolean }>`\n\twidth: 100%;\n\tmargin-bottom: 0;\n\tdisplay: grid;\n\tgap: ${spacing(1)};\n\n\t${modifier(\n\t\t'$underline',\n\t\tcss`\n\t\t\tgap: ${spacing(3)};\n\t\t`,\n\t)}\n`;\n\nexport const LabelText = styled.div<{ $underline: boolean }>`\n\t${typography('body.base.strong')}\n\t${modifier(\n\t\t'$underline',\n\t\tcss`\n\t\t\tpadding-bottom: ${spacing(1)};\n\t\t\tborder-bottom: 1px solid ${value('color.border.light')};\n\t\t`,\n\t)}\n\tcolor: ${value('color.text.default')};\n\tcursor: default;\n`;\n\nexport const LabelDescription = styled.p`\n\tmargin: 0;\n\tpadding: 0;\n\t${typography('body.small.default')}\n\tcolor: ${value('color.text.light.default')};\n`;\n\nexport const AsteriskIcon = styled.span`\n\tcolor: ${value('color.background.action.danger.default')};\n\t&:after {\n\t\tcontent: '*';\n\t}\n`;\n"],"names":[],"sourceRoot":""}